datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    todos         Todo[]
    todoGroup     TodoGroup[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Todo {
    id          Int             @id @default(autoincrement())
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    name        String
    description String
    status      Boolean
    isFavourite Boolean
    userId      String
    user        User            @relation(fields: [userId], references: [id])
    todoGroupId Int?
    todoGroup   TodoGroup?      @relation(fields: [todoGroupId], references: [id], onDelete: Cascade)
    labels      LabelsOnTodos[]
}

model LabelsOnTodos {
    todo       Todo     @relation(fields: [todoId], references: [id])
    todoId     Int // relation scalar field (used in the `@relation` attribute above)
    label      Label    @relation(fields: [labelId], references: [id])
    labelId    Int // relation scalar field (used in the `@relation` attribute above)
    assignedAt DateTime @default(now())

    @@id([todoId, labelId])
}

model Label {
    id          Int             @id @default(autoincrement())
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    name        String
    todoGroupId Int
    todoGroup   TodoGroup       @relation(fields: [todoGroupId], references: [id])
    todos       LabelsOnTodos[]
}

model TodoGroup {
    id             Int         @id @default(autoincrement())
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
    name           String
    userId         String
    user           User        @relation(fields: [userId], references: [id])
    parentGroupId  Int?
    parentGroup    TodoGroup?  @relation("TodoGroupRelationship", fields: [parentGroupId], references: [id], onDelete: Cascade)
    childrenGroups TodoGroup[] @relation("TodoGroupRelationship")
    todos          Todo[]
    labels         Label[]
}
